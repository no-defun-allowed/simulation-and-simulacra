(in-package :simulation-and-simulacra)

(defconstant +binomial-table-length+ 56)

(declaim (inline pearl-drops next-random))
(defun pearl-drops (uniform64)
  (declare ((unsigned-byte 64) uniform64)
           (optimize (speed 3)))
  (let ((first 0)
        (last  (1- +binomial-table-length+)))
    (loop until (= first last)
          do (let ((middle (ceiling (+ first last) 2)))
               (if (>= uniform64 (aref +binomial-table+ middle))
                   (setf last  (1- middle))
                   (setf first middle))))
    (the (unsigned-byte 8) first)))

(declaim (ftype (function ((unsigned-byte 64))
                          (values (unsigned-byte 32) (unsigned-byte 32)))
                next-random))
(defun next-random (state)
  (declare ((unsigned-byte 64) state)
           (optimize (speed 3)))
  (let ((c (ldb (byte 32 32) state))
        (x (ldb (byte 32 0)  state)))
    (values (ldb (byte 64 0) (+ c (* x 4294883355)))
            (logxor c x))))

(defun simulate ()
  (declare (optimize (speed 3) (safety 0)
                     (space 0) (debug 0)
                     (compilation-speed 0)))
  (let ((seed (random (expt 2 64)))
        (best-rod-rods 0)
        (best-rod-pearls 0)
        (best-pearl-rods 0)
        (best-pearl-pearls 0))
    (declare ((unsigned-byte 64) seed)
             ((unsigned-byte 16)
              best-rod-rods best-rod-pearls
              best-pearl-rods best-pearl-pearls))
    (flet ((sample ()
             (multiple-value-bind (next-seed value)
                 (next-random seed)
               (setf seed next-seed)
               value)))
      (declare (inline sample)
               (dynamic-extent #'sample))
      (dotimes (n +kernel-iterations+)
        (let ((pearls 0)
              (rods 0))
          (declare ((unsigned-byte 16) pearls rods))
          ;; Sample the rods using LOGCOUNT.
          (dotimes (n (floor 305 32))
            (incf rods (logcount (sample))))
          (incf rods (logcount (ldb (byte (mod 305 32) 0) (sample))))
          ;; Sample the pearls, using our table.
          (setf pearls (pearl-drops (logior (sample)
                                            (ash (sample) 32))))
          ;; Update best results.
          (multiple-value-setq (best-rod-rods best-rod-pearls)
            (maximize-rods rods pearls best-rod-rods best-rod-pearls))
          (multiple-value-setq (best-pearl-rods best-pearl-pearls)
            (maximize-pearls rods pearls best-pearl-rods best-pearl-pearls)))))
    (vector best-rod-rods best-rod-pearls best-pearl-rods best-pearl-pearls)))
